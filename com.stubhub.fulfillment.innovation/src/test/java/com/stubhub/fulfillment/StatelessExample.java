package com.stubhub.fulfillment;import com.stubhub.drools.entity.example.Applicant;import com.stubhub.drools.entity.example.Application;import com.stubhub.drools.entity.example.Person;import org.drools.KnowledgeBase;import org.drools.KnowledgeBaseFactory;import org.drools.builder.KnowledgeBuilder;import org.drools.builder.KnowledgeBuilderFactory;import org.drools.builder.ResourceType;import org.drools.command.Command;import org.drools.command.CommandFactory;import org.drools.io.ResourceFactory;import org.drools.runtime.ExecutionResults;import org.drools.runtime.StatelessKnowledgeSession;import org.junit.Test;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import java.util.List;import static org.junit.Assert.*;/** * Created with IntelliJ IDEA. * User: jicui * Date: 2/11/13 * Time: 3:31 PM * To change this template use File | Settings | File Templates. */public class StatelessExample {    @Test    public void test1() {        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();        kbuilder.add(ResourceFactory.newClassPathResource("rules/basicRules.drl",getClass()), ResourceType.DRL);        if (kbuilder.hasErrors()) {            System.err.println(kbuilder.getErrors().toString());        }        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();        kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());        StatelessKnowledgeSession ksession = kbase.newStatelessKnowledgeSession();        Applicant applicant = new Applicant("Mr John Smith", 16);        Application application = new Application(new Date(),true);        assertTrue(application.isValid());        ksession.execute( Arrays.asList(new Object[]{application, applicant}) );        assertFalse( application.isValid() );    }    @Test    public void testCommands(){        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();        kbuilder.add(ResourceFactory.newClassPathResource("rules/basicRules.drl",getClass()), ResourceType.DRL);        if (kbuilder.hasErrors()) {            System.err.println(kbuilder.getErrors().toString());        }        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();        kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());        StatelessKnowledgeSession ksession = kbase.newStatelessKnowledgeSession();        List<Command> cmds = new ArrayList<Command>();        cmds.add( CommandFactory.newInsert(new Person("Mr John Smith"), "mrSmith"));        cmds.add( CommandFactory.newInsert( new Person( "Mr John Doe" ), "mrDoe" ));        ExecutionResults results = ksession.execute( CommandFactory.newBatchExecution( cmds ) );        assertEquals( new Person( "Mr John Smith" ), results.getValue( "mrSmith" ) );    }}