package com.stubhub.fulfillment;import com.stubhub.drools.entity.example.Fire;import com.stubhub.drools.entity.example.Room;import com.stubhub.drools.entity.example.Sprinkler;import org.drools.KnowledgeBase;import org.drools.KnowledgeBaseFactory;import org.drools.builder.KnowledgeBuilder;import org.drools.builder.KnowledgeBuilderFactory;import org.drools.builder.ResourceType;import org.drools.io.ResourceFactory;import org.drools.runtime.StatefulKnowledgeSession;import org.drools.runtime.rule.FactHandle;import org.junit.Test;import java.util.HashMap;import java.util.Map;/** * Created with IntelliJ IDEA. * User: jicui * Date: 2/11/13 * Time: 4:58 PM * To change this template use File | Settings | File Templates. */public class StatefulExample {    @Test    public void test1(){        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();        kbuilder.add( ResourceFactory.newClassPathResource("rules/example2.drl", getClass()),                ResourceType.DRL );        if ( kbuilder.hasErrors() ) {            System.err.println( kbuilder.getErrors().toString() );        }        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();        kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();        String[] names = new String[]{"kitchen", "bedroom", "office", "livingroom"};        Map<String,Room> name2room = new HashMap<String,Room>();        for( String name: names ){            Room room = new Room( name );            name2room.put( name, room );            ksession.insert( room );            Sprinkler sprinkler = new Sprinkler(room);            ksession.insert( sprinkler );        }        ksession.fireAllRules();    }    @Test    public void test2(){        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();        kbuilder.add( ResourceFactory.newClassPathResource("rules/example2.drl", getClass()),                ResourceType.DRL );        if ( kbuilder.hasErrors() ) {            System.err.println( kbuilder.getErrors().toString() );        }        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();        kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();        String[] names = new String[]{"kitchen", "bedroom", "office", "livingroom"};        Map<String,Room> name2room = new HashMap<String,Room>();        for( String name: names ){            Room room = new Room( name );            name2room.put( name, room );            ksession.insert( room );            Sprinkler sprinkler = new Sprinkler(room);            ksession.insert( sprinkler );        }        Fire kitchenFire = new Fire( name2room.get( "kitchen" ) );        Fire officeFire = new Fire( name2room.get( "office" ) );        FactHandle kitchenFireHandle = ksession.insert( kitchenFire );        FactHandle officeFireHandle = ksession.insert( officeFire );        ksession.fireAllRules();    }    @Test    public void test3(){        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();        kbuilder.add( ResourceFactory.newClassPathResource("rules/example2.drl", getClass()),                ResourceType.DRL );        if ( kbuilder.hasErrors() ) {            System.err.println( kbuilder.getErrors().toString() );        }        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();        kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();        String[] names = new String[]{"kitchen", "bedroom", "office", "livingroom"};        Map<String,Room> name2room = new HashMap<String,Room>();        for( String name: names ){            Room room = new Room( name );            name2room.put( name, room );            ksession.insert( room );            Sprinkler sprinkler = new Sprinkler(room);            ksession.insert( sprinkler );        }        Fire kitchenFire = new Fire( name2room.get( "kitchen" ) );        Fire officeFire = new Fire( name2room.get( "office" ) );        FactHandle kitchenFireHandle = ksession.insert( kitchenFire );        FactHandle officeFireHandle = ksession.insert( officeFire );        ksession.fireAllRules();        ksession.retract( kitchenFireHandle );        ksession.retract( officeFireHandle );        ksession.fireAllRules();    }}